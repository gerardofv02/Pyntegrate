from ._genomic_signal import *
from .persistence import *
from .array_helpers import *
import os
import gffutils
import pybedtools
from pybedtools.featurefuncs import TSS
from gffutils.helpers import asinterval
import multiprocessing
import numpy as np
import sys
from matplotlib import pyplot as plt
import subprocess

def tss_generator(db):
    """
    Generator function to yield TSS of each annotated transcript
    """
    for transcript in db.features_of_type('transcript'):
        yield TSS(asinterval(transcript), upstream=1, downstream=0)

def generate_arrays_features_from_tsses_from_db(dbPath, ipSignalPath, extensionIp,inputSignalPath,extensionInput, genome):

    """
    Function to process ChIP-seq data, specifically to analyze the protein enrichment signal in certain genomic regions, such as transcription start sites (TSS)

    Params:
        - dbPath: String: The path where database of CHIP-seq data is stored (It must be a db generated by the CHIP-seq data with pybedtools library)
        - ipSignalPath: String: The path where IP signal data is stored
        - extensionIp: String: Type of the file of the IP signal data file. Example:('bigwig','bam','bed',...)
        - inputSignalPath: String: The path where INPUT signal data is stored
        - extensionInput: String: Type of the file of the INPUT signal data file example:('bigwig','bam','bed',...)
        - genome: String: The genome of the CHIP-seq data we want to analyze. Example: ('hg19','hg38',...)
    """
    
    ##Primer paso 
    db = gffutils.FeatureDB(dbPath) #Primer paso
    tsses = pybedtools.BedTool(tss_generator(db)).saveas('tsses.gtf')

    remove_duplicates("tsses.gtf")
    tsses = pybedtools.BedTool("tsses.gtf")
    tsses_1kb = tsses.slop(b=1000, genome=genome, output='tsses-1kb.gtf')
    


    ##Segundo paso
    ip_signal = genomic_signal(ipSignalPath,extensionIp)
    input_signal = genomic_signal(inputSignalPath,extensionInput)
    
    
    

    print(ip_signal,input_signal)
    processes = multiprocessing.cpu_count()
    if not os.path.exists('example.npz'):

        ##Tercer paso

        # The signal is the IP ChIP-seq BAM file.
        ip_array = ip_signal.array(

            # Look at signal over these windows
            tsses_1kb,

            # Bin signal into this many bins per window
            bins=100,

            # Use multiple CPUs. Dramatically speeds up run time.
            processes=processes)

        # print(ip_array[0][:10])
        # Do the same thing for input.

        ##Cuartopaso
        input_array = input_signal.array(
            tsses_1kb,
            bins=100,
            processes=processes)

        # print(input_array[:10])



        # Normalize to library size. The values in the array
        # will be in units of "reads per million mapped reads"
        ##SExto paso
        print(ip_array)

        for i in ip_array:
            i[0]['values'] /= ip_signal.mapped_read_count() / 1e6

        for y in input_array:
            y[0]['values'] /= input_signal.mapped_read_count() / 1e6
        # ip_array /= ip_signal.mapped_read_count() / 1e6
        # input_array /= input_signal.mapped_read_count() / 1e6


        print("Ip_array: " , ip_array)
        print("Input_array: " , input_array)

        ##SExto paso
        # Cache to disk. The data will be saved as "example.npz" and "example.features".
        save_features_and_arrays(
            features=tsses,
            arrays={'ip': ip_array, 'input': input_array},
            prefix='example',
            link_features=True,
            overwrite=True)

    features, arrays = load_features_and_arrays(prefix='example')
    return features ,arrays ,tsses, tsses_1kb

def values_array(array_ip, array_input):
    arrays_ip = []
    arrays_input = []
    for x in array_ip:
       arrays_ip.append( x[0]['values'])
    for y in array_input:
       arrays_input.append( y[0]['values'])
    print(arrays_ip)
    arrays_ip = np.array(arrays_ip)
    arrays_input = np.array(arrays_input)

    return arrays_ip, arrays_input


def calculate_peaks_with_gene_name(arrays_ip, arrays_input):
    normalized_subtracted = np.array([])
    try_boolean = []
    for index,x in enumerate(arrays_ip):
        # print(index)
        # print(arrays_ip)
        normalized_subtracted = np.append(normalized_subtracted,{ 'values': arrays_ip[index][0]['values']-arrays_input[index][0]['values'], 'gene_name': arrays_ip[index][0]['gene_name']})


    return normalized_subtracted


def calculate_peaks(arrays_ip, arrays_input):

    """
    Function to calculate the peaks between the IP signal and INPUT signal.
    Params:
        - arrays_ip: Array: The array of the IP signal data
        - arrays_input: Array: The array of the INPUT signal data
    """

    if(len(arrays_ip) != len(arrays_input)):
        sys.stderr.write("Length of ip is different from input array")
    peaks = arrays_ip - arrays_input
    return peaks


def distance_from_tss_chipSeq(arrays_ip, arrays_input):

    """
    Function to show in a graphic the distance of IP signal data and INPUT signal data from the TSS.
    Params:
        - arrays_ip: Array: The array of the IP signal data
        - arrays_input: Array: The array of the INPUT signal data
    """

    x = np.linspace(-1000, 1000, 100)


    # Create a figure and axes
    fig = plt.figure()
    ax = fig.add_subplot(111)


    # Plot the IP:
    ax.plot(
        # use the x-axis values we created
        x,

        # axis=0 takes the column-wise mean, so with
        # 100 columns we'll have 100 means to plot
        arrays_ip.mean(axis=0),

        # Make it red
        color='r',

        # Label to show up in legend
        label='IP')


    # Do the same thing with the input
    ax.plot(
        x,
        arrays_input.mean(axis=0),
        color='k',
        label='input')


    # Add a vertical line at the TSS, at position 0
    ax.axvline(0, linestyle=':', color='k')


    # Add labels and legend
    ax.set_xlabel('Distance from TSS (bp)')
    ax.set_ylabel('Average read coverage (per million mapped reads)')
    ax.legend(loc='best')
    return fig


##Hacer que homer lo instale el propio usuario
def create_homer_tag_directory(name,file):
    subprocess.run(["makeTagDirectory",name,file])
    return


def homer_peaks(tag_directory,style="factor",output="auto"):
    print(output,style)

    subprocess.run(["findPeaks", tag_directory, "-style",style,"-o",output])
    return

def homer_annotate_peaks(file_directory,gene, output):

    with open(output, "w") as out_file, open("logs.log", "w") as err_file:
        subprocess.run(["annotatePeaks.pl", file_directory, gene], stdout=out_file, stderr=err_file)



def genes_not_used_with_rna(tsses, data, normalized_subtracted):

    """
    Function to delete the genes not used in both data (chip and rna). Need to use this function to analyse both them together because
    having more genes can have problems with array length. Important to be in the same order normalized_subtracted and tsses because 
    index are used

    Params: 
        -tsses: Pybedtool class where there is chip-seq data
        -data: DEseq2ResultsPrueba class where there is rna-seq data
        -normalized_subtracted: Array where have the chip-seq peaks calculated
    """
    df2 = tsses.to_dataframe()
    print(df2)
    gene_used = []
    gene_not_used_chip = []
    indexs = []
    values_not_data = []
    for idx,value in enumerate(df2.values):
        if value[8].split(";")[3].split(" ")[2].split('"')[1] in data.index:
            indexs.append(idx)
            gene_used.append(value[8].split(";")[3].split(" ")[2].split('"')[1])
        else:
            gene_not_used_chip.append(value[8].split(";")[3].split(" ")[2].split('"')[1])


    with open("genes_not_used_chip_seq.log", "w") as chip_log:
        for gene in gene_not_used_chip:
            chip_log.write(f"{gene}\n")

    for value_data in data.index:
        if value_data not in gene_used:
            values_not_data.append(value_data)

    with open("genes_not_used_rna_seq.log", "w") as rna_log:
        for gene in values_not_data:
            rna_log.write(f"{gene}\n")

    print("\nGenes_not_used_rna-seq: ",values_not_data)
    normalized_subtracted_good= []
    ##For put good normalized subtracted
    for i in range(len(normalized_subtracted)):
        if i in indexs:
            normalized_subtracted_good.append(normalized_subtracted[i])
    ##FOr deseq2
    data = data.drop(values_not_data)

    normalized_subtracted= np.array(normalized_subtracted_good) 
    print("Normalized subtract len: ", len(normalized_subtracted))

    return normalized_subtracted,data

    # data2['log2FoldChange'] = data["fpkm"]
    # print("Len data2: ",len(data2), "DAta2: ",data2)
    # print("\n\nlen data: ",len(data), "Data: ", data)